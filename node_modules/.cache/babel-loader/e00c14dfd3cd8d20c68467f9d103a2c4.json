{"ast":null,"code":"import { push } from 'connected-react-router';\nimport { useSelector } from 'react-redux';\nimport { db, FirebaseTimestamp } from '../../firebase';\nimport { deleteMenuAction, fetchMenusAction } from './actions';\nconst menusRef = db.collection('menus');\nconst selector = useSelector(state => state);\nexport const deleteMenu = id => {\n  return async (dispatch, getState) => {\n    menusRef.doc(id).delete().then(() => {\n      const prevMenus = getState().menus.list;\n      const nextMenus = prevMenus.filter(menu => menu.id !== id);\n      dispatch(deleteMenuAction(nextMenus));\n    });\n  };\n};\nexport const fetchMenus = () => {\n  return async dispatch => {\n    menusRef.orderBy('star', 'desc').get().then(snapshots => {\n      const menuList = [];\n      snapshots.forEach(snapshot => {\n        const menu = snapshot.data();\n        menuList.push(menu);\n      });\n      dispatch(fetchMenusAction(menuList));\n    });\n  };\n};\nexport const saveMenu = (id, menu, price, star, images) => {\n  return async dispatch => {\n    const timestamp = FirebaseTimestamp.now();\n    const data = {\n      menu: menu,\n      price: parseInt(price, 10),\n      star: star,\n      images: images,\n      updated_at: timestamp\n    };\n\n    if (id === \"\") {\n      const ref = menusRef.doc();\n      data.created_at = timestamp;\n      id = ref.id;\n      data.id = id;\n    }\n\n    return menusRef.doc(id).set(data, {\n      merge: true\n    }).then(() => {\n      dispatch(push('/'));\n    }).catch(error => {\n      throw new Error(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/c.daiki/Desktop/react/redux/redux-app/src/reducks/menus/operations.js"],"names":["push","useSelector","db","FirebaseTimestamp","deleteMenuAction","fetchMenusAction","menusRef","collection","selector","state","deleteMenu","id","dispatch","getState","doc","delete","then","prevMenus","menus","list","nextMenus","filter","menu","fetchMenus","orderBy","get","snapshots","menuList","forEach","snapshot","data","saveMenu","price","star","images","timestamp","now","parseInt","updated_at","ref","created_at","set","merge","catch","error","Error"],"mappings":"AAAA,SAASA,IAAT,QAAqB,wBAArB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,EAAT,EAAaC,iBAAb,QAAsC,gBAAtC;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,WAAnD;AAGA,MAAMC,QAAQ,GAAGJ,EAAE,CAACK,UAAH,CAAc,OAAd,CAAjB;AACA,MAAMC,QAAQ,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAZ,CAA5B;AAEA,OAAO,MAAMC,UAAU,GAAIC,EAAD,IAAQ;AAChC,SAAO,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AAClCP,IAAAA,QAAQ,CAACQ,GAAT,CAAaH,EAAb,EAAiBI,MAAjB,GACGC,IADH,CACQ,MAAM;AACV,YAAMC,SAAS,GAAGJ,QAAQ,GAAGK,KAAX,CAAiBC,IAAnC;AACA,YAAMC,SAAS,GAAGH,SAAS,CAACI,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYA,EAArC,CAAlB;AACAC,MAAAA,QAAQ,CAACR,gBAAgB,CAACgB,SAAD,CAAjB,CAAR;AACD,KALH;AAMD,GAPD;AAQD,CATM;AAWP,OAAO,MAAMG,UAAU,GAAG,MAAM;AAC9B,SAAO,MAAMX,QAAN,IAAmB;AACxBN,IAAAA,QAAQ,CAACkB,OAAT,CAAiB,MAAjB,EAAyB,MAAzB,EAAiCC,GAAjC,GACGT,IADH,CACQU,SAAS,IAAI;AACjB,YAAMC,QAAQ,GAAG,EAAjB;AACAD,MAAAA,SAAS,CAACE,OAAV,CAAkBC,QAAQ,IAAI;AAC5B,cAAMP,IAAI,GAAGO,QAAQ,CAACC,IAAT,EAAb;AACAH,QAAAA,QAAQ,CAAC3B,IAAT,CAAcsB,IAAd;AACD,OAHD;AAIAV,MAAAA,QAAQ,CAACP,gBAAgB,CAACsB,QAAD,CAAjB,CAAR;AACD,KARH;AASD,GAVD;AAWD,CAZM;AAcP,OAAO,MAAMI,QAAQ,GAAG,CAACpB,EAAD,EAAKW,IAAL,EAAWU,KAAX,EAAkBC,IAAlB,EAAwBC,MAAxB,KAAmC;AACzD,SAAO,MAAMtB,QAAN,IAAmB;AACxB,UAAMuB,SAAS,GAAGhC,iBAAiB,CAACiC,GAAlB,EAAlB;AAEA,UAAMN,IAAI,GAAG;AACXR,MAAAA,IAAI,EAAEA,IADK;AAEXU,MAAAA,KAAK,EAAEK,QAAQ,CAACL,KAAD,EAAQ,EAAR,CAFJ;AAGXC,MAAAA,IAAI,EAAEA,IAHK;AAIXC,MAAAA,MAAM,EAAEA,MAJG;AAKXI,MAAAA,UAAU,EAAEH;AALD,KAAb;;AAQA,QAAIxB,EAAE,KAAK,EAAX,EAAe;AACb,YAAM4B,GAAG,GAAGjC,QAAQ,CAACQ,GAAT,EAAZ;AACAgB,MAAAA,IAAI,CAACU,UAAL,GAAkBL,SAAlB;AACAxB,MAAAA,EAAE,GAAG4B,GAAG,CAAC5B,EAAT;AACAmB,MAAAA,IAAI,CAACnB,EAAL,GAAUA,EAAV;AACD;;AAGD,WAAOL,QAAQ,CAACQ,GAAT,CAAaH,EAAb,EAAiB8B,GAAjB,CAAqBX,IAArB,EAA2B;AAACY,MAAAA,KAAK,EAAE;AAAR,KAA3B,EACJ1B,IADI,CACC,MAAM;AACVJ,MAAAA,QAAQ,CAACZ,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,KAHI,EAGF2C,KAHE,CAGKC,KAAD,IAAW;AAClB,YAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD,KALI,CAAP;AAMD,GAzBD;AA0BD,CA3BM","sourcesContent":["import { push } from 'connected-react-router';\r\nimport { useSelector } from 'react-redux';\r\nimport { db, FirebaseTimestamp } from '../../firebase';\r\nimport { deleteMenuAction, fetchMenusAction } from './actions';\r\n\r\n\r\nconst menusRef = db.collection('menus');\r\nconst selector = useSelector((state) => state);\r\n\r\nexport const deleteMenu = (id) => {\r\n  return async(dispatch, getState) => {\r\n    menusRef.doc(id).delete()\r\n      .then(() => {\r\n        const prevMenus = getState().menus.list\r\n        const nextMenus = prevMenus.filter(menu => menu.id !== id)\r\n        dispatch(deleteMenuAction(nextMenus))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchMenus = () => {\r\n  return async(dispatch) => {\r\n    menusRef.orderBy('star', 'desc').get()\r\n      .then(snapshots => {\r\n        const menuList = []\r\n        snapshots.forEach(snapshot => {\r\n          const menu = snapshot.data()\r\n          menuList.push(menu)\r\n        })\r\n        dispatch(fetchMenusAction(menuList))\r\n      })\r\n  }\r\n}\r\n\r\nexport const saveMenu = (id, menu, price, star, images) => {\r\n  return async(dispatch) => {\r\n    const timestamp = FirebaseTimestamp.now()\r\n\r\n    const data = {\r\n      menu: menu,\r\n      price: parseInt(price, 10),\r\n      star: star,\r\n      images: images,\r\n      updated_at: timestamp\r\n    }\r\n    \r\n    if (id === \"\") {\r\n      const ref = menusRef.doc()\r\n      data.created_at = timestamp;\r\n      id = ref.id;\r\n      data.id = id;\r\n    }\r\n\r\n\r\n    return menusRef.doc(id).set(data, {merge: true})\r\n      .then(() => {\r\n        dispatch(push('/'))\r\n      }).catch((error) => {\r\n        throw new Error(error)\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}