{"ast":null,"code":"import { push } from 'connected-react-router';\nimport { db, FirebaseTimestamp } from '../../firebase';\nimport { deleteMenuAction, fetchMenusAction } from './actions';\nimport firebase from 'firebase';\nconst menusRef = db.collection('restaurants');\nexport const deleteMenu = id => {\n  return async (dispatch, getState) => {\n    menusRef.doc(id).delete().then(() => {\n      const prevMenus = getState().menus.list;\n      const nextMenus = prevMenus.filter(menu => menu.id !== id);\n      dispatch(deleteMenuAction(nextMenus));\n    });\n  };\n};\nexport const fetchMenus = restId => {\n  return async dispatch => {\n    menusRef.where(\"id\", \"==\", restId).menus.orderBy('star', 'desc').get().then(snapshots => {\n      const menuList = [];\n      snapshots.forEach(snapshot => {\n        const menu = snapshot.data();\n        menuList.push(menu);\n      });\n      dispatch(fetchMenusAction(menuList));\n    });\n  };\n};\nexport const saveMenu = (restId, id, name, price, star, images) => {\n  return async dispatch => {\n    const timestamp = FirebaseTimestamp.now();\n    let tmp = 0;\n\n    if (id === \"\") {\n      const S = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n      const N = 16;\n      tmp = Array.from(crypto.getRandomValues(new Uint32Array(N))).map(n => S[n % S.length]).join('');\n    } else {\n      tmp = id;\n    }\n\n    const data = {\n      id: tmp,\n      name: name,\n      price: parseInt(price, 10),\n      star: star,\n      images: images,\n      updated_at: timestamp\n    };\n    return menusRef.doc(restId).update({\n      menus: firebase.firestore.FieldValue.arrayUnion(data)\n    }).then(() => {\n      dispatch(push('/restaurant/' + restId + '/menu/'));\n    }).catch(error => {\n      throw new Error(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/c.daiki/Desktop/react/redux/redux-app/src/reducks/menus/operations.js"],"names":["push","db","FirebaseTimestamp","deleteMenuAction","fetchMenusAction","firebase","menusRef","collection","deleteMenu","id","dispatch","getState","doc","delete","then","prevMenus","menus","list","nextMenus","filter","menu","fetchMenus","restId","where","orderBy","get","snapshots","menuList","forEach","snapshot","data","saveMenu","name","price","star","images","timestamp","now","tmp","S","N","Array","from","crypto","getRandomValues","Uint32Array","map","n","length","join","parseInt","updated_at","update","firestore","FieldValue","arrayUnion","catch","error","Error"],"mappings":"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","sourcesContent":["import { push } from 'connected-react-router';\r\nimport { db, FirebaseTimestamp } from '../../firebase';\r\nimport { deleteMenuAction, fetchMenusAction } from './actions';\r\nimport firebase from 'firebase';\r\n\r\n\r\nconst menusRef = db.collection('restaurants');\r\n\r\nexport const deleteMenu = (id) => {\r\n  return async(dispatch, getState) => {\r\n    menusRef.doc(id).delete()\r\n      .then(() => {\r\n        const prevMenus = getState().menus.list\r\n        const nextMenus = prevMenus.filter(menu => menu.id !== id)\r\n        dispatch(deleteMenuAction(nextMenus))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchMenus = (restId) => {\r\n  return async(dispatch) => {\r\n    menusRef.where(\"id\", \"==\", restId).menus.orderBy('star', 'desc').get()\r\n      .then(snapshots => {\r\n        const menuList = []\r\n        snapshots.forEach(snapshot => {\r\n          const menu = snapshot.data()\r\n          menuList.push(menu)\r\n        })\r\n        dispatch(fetchMenusAction(menuList))\r\n      })\r\n  }\r\n}\r\n\r\nexport const saveMenu = (restId, id, name, price, star, images) => {\r\n  return async(dispatch) => {\r\n    const timestamp = FirebaseTimestamp.now()\r\n    let tmp = 0;\r\n\r\n    if (id === \"\") {\r\n      const S=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n      const N=16;\r\n      tmp = Array.from(crypto.getRandomValues(new Uint32Array(N))).map((n)=>S[n%S.length]).join('')\r\n    } else {\r\n      tmp = id;\r\n    }\r\n\r\n    const data = {\r\n      id: tmp,\r\n      name: name,\r\n      price: parseInt(price, 10),\r\n      star: star,\r\n      images: images,\r\n      updated_at: timestamp\r\n    }\r\n\r\n    return menusRef.doc(restId).update({menus: firebase.firestore.FieldValue.arrayUnion(data)})\r\n      .then(() => {\r\n        dispatch(push('/restaurant/'+ restId + '/menu/'))\r\n      }).catch((error) => {\r\n        throw new Error(error)\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}