{"ast":null,"code":"import { push } from 'connected-react-router';\nimport { db, FirebaseTimestamp } from '../../firebase';\nimport { deleteRestaurantAction, fetchRestaurantsAction } from './actions';\nconst restaurantsRef = db.collection('restaurants');\nexport const deleteRestaurant = id => {\n  return async (dispatch, getState) => {\n    restaurantsRef.doc(id).delete().then(() => {\n      const prevRestaurants = getState().restaurants.list;\n      const nextRestaurants = prevRestaurants.filter(restaurant => restaurant.id !== id);\n      dispatch(deleteRestaurantAction(nextRestaurants));\n    });\n  };\n};\nexport const fetchRestaurants = () => {\n  return async dispatch => {\n    restaurantsRef.orderBy('updated_at', 'desc').get().then(snapshots => {\n      const restaurantList = [];\n      snapshots.forEach(snapshot => {\n        const restaurant = snapshot.data();\n        restaurantList.push(restaurant);\n      });\n      dispatch(fetchRestaurantsAction(restaurantList));\n    });\n  };\n};\nexport const saveRestaurant = (id, name, pref, genre, images) => {\n  return async dispatch => {\n    const timestamp = FirebaseTimestamp.now();\n    const data = {\n      name: name,\n      pref: pref,\n      genre: genre,\n      images: images,\n      menus: [],\n      updated_at: timestamp\n    };\n\n    if (id === \"\") {\n      const ref = restaurantsRef.doc();\n      data.created_at = timestamp;\n      id = ref.id;\n      data.id = id;\n    }\n\n    return restaurantsRef.doc(id).set(data, {\n      merge: true\n    }).then(() => {\n      dispatch(push('/'));\n    }).catch(error => {\n      throw new Error(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/c.daiki/Desktop/react/redux/redux-app/src/reducks/restaurants/operations.js"],"names":["push","db","FirebaseTimestamp","deleteRestaurantAction","fetchRestaurantsAction","restaurantsRef","collection","deleteRestaurant","id","dispatch","getState","doc","delete","then","prevRestaurants","restaurants","list","nextRestaurants","filter","restaurant","fetchRestaurants","orderBy","get","snapshots","restaurantList","forEach","snapshot","data","saveRestaurant","name","pref","genre","images","timestamp","now","menus","updated_at","ref","created_at","set","merge","catch","error","Error"],"mappings":"AAAA,SAASA,IAAT,QAAqB,wBAArB;AACA,SAASC,EAAT,EAAaC,iBAAb,QAAsC,gBAAtC;AACA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,WAA/D;AAGA,MAAMC,cAAc,GAAGJ,EAAE,CAACK,UAAH,CAAc,aAAd,CAAvB;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,EAAD,IAAQ;AACtC,SAAO,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AAClCL,IAAAA,cAAc,CAACM,GAAf,CAAmBH,EAAnB,EAAuBI,MAAvB,GACGC,IADH,CACQ,MAAM;AACV,YAAMC,eAAe,GAAGJ,QAAQ,GAAGK,WAAX,CAAuBC,IAA/C;AACA,YAAMC,eAAe,GAAGH,eAAe,CAACI,MAAhB,CAAuBC,UAAU,IAAIA,UAAU,CAACX,EAAX,KAAkBA,EAAvD,CAAxB;AACAC,MAAAA,QAAQ,CAACN,sBAAsB,CAACc,eAAD,CAAvB,CAAR;AACD,KALH;AAMD,GAPD;AAQD,CATM;AAWP,OAAO,MAAMG,gBAAgB,GAAG,MAAM;AACpC,SAAO,MAAMX,QAAN,IAAmB;AACxBJ,IAAAA,cAAc,CAACgB,OAAf,CAAuB,YAAvB,EAAqC,MAArC,EAA6CC,GAA7C,GACGT,IADH,CACQU,SAAS,IAAI;AACjB,YAAMC,cAAc,GAAG,EAAvB;AACAD,MAAAA,SAAS,CAACE,OAAV,CAAkBC,QAAQ,IAAI;AAC5B,cAAMP,UAAU,GAAGO,QAAQ,CAACC,IAAT,EAAnB;AACAH,QAAAA,cAAc,CAACxB,IAAf,CAAoBmB,UAApB;AACD,OAHD;AAIAV,MAAAA,QAAQ,CAACL,sBAAsB,CAACoB,cAAD,CAAvB,CAAR;AACD,KARH;AASD,GAVD;AAWD,CAZM;AAcP,OAAO,MAAMI,cAAc,GAAG,CAACpB,EAAD,EAAKqB,IAAL,EAAWC,IAAX,EAAiBC,KAAjB,EAAwBC,MAAxB,KAAmC;AAC/D,SAAO,MAAMvB,QAAN,IAAmB;AACxB,UAAMwB,SAAS,GAAG/B,iBAAiB,CAACgC,GAAlB,EAAlB;AAEA,UAAMP,IAAI,GAAG;AACXE,MAAAA,IAAI,EAAEA,IADK;AAEXC,MAAAA,IAAI,EAAEA,IAFK;AAGXC,MAAAA,KAAK,EAAEA,KAHI;AAIXC,MAAAA,MAAM,EAAEA,MAJG;AAKXG,MAAAA,KAAK,EAAE,EALI;AAMXC,MAAAA,UAAU,EAAEH;AAND,KAAb;;AASA,QAAIzB,EAAE,KAAK,EAAX,EAAe;AACb,YAAM6B,GAAG,GAAGhC,cAAc,CAACM,GAAf,EAAZ;AACAgB,MAAAA,IAAI,CAACW,UAAL,GAAkBL,SAAlB;AACAzB,MAAAA,EAAE,GAAG6B,GAAG,CAAC7B,EAAT;AACAmB,MAAAA,IAAI,CAACnB,EAAL,GAAUA,EAAV;AACD;;AAGD,WAAOH,cAAc,CAACM,GAAf,CAAmBH,EAAnB,EAAuB+B,GAAvB,CAA2BZ,IAA3B,EAAiC;AAACa,MAAAA,KAAK,EAAE;AAAR,KAAjC,EACJ3B,IADI,CACC,MAAM;AACVJ,MAAAA,QAAQ,CAACT,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,KAHI,EAGFyC,KAHE,CAGKC,KAAD,IAAW;AAClB,YAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD,KALI,CAAP;AAMD,GA1BD;AA2BD,CA5BM","sourcesContent":["import { push } from 'connected-react-router';\r\nimport { db, FirebaseTimestamp } from '../../firebase';\r\nimport { deleteRestaurantAction, fetchRestaurantsAction } from './actions';\r\n\r\n\r\nconst restaurantsRef = db.collection('restaurants');\r\n\r\nexport const deleteRestaurant = (id) => {\r\n  return async(dispatch, getState) => {\r\n    restaurantsRef.doc(id).delete()\r\n      .then(() => {\r\n        const prevRestaurants = getState().restaurants.list\r\n        const nextRestaurants = prevRestaurants.filter(restaurant => restaurant.id !== id)\r\n        dispatch(deleteRestaurantAction(nextRestaurants))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchRestaurants = () => {\r\n  return async(dispatch) => {\r\n    restaurantsRef.orderBy('updated_at', 'desc').get()\r\n      .then(snapshots => {\r\n        const restaurantList = []\r\n        snapshots.forEach(snapshot => {\r\n          const restaurant = snapshot.data()\r\n          restaurantList.push(restaurant)\r\n        })\r\n        dispatch(fetchRestaurantsAction(restaurantList))\r\n      })\r\n  }\r\n}\r\n\r\nexport const saveRestaurant = (id, name, pref, genre, images) => {\r\n  return async(dispatch) => {\r\n    const timestamp = FirebaseTimestamp.now()\r\n\r\n    const data = {\r\n      name: name,\r\n      pref: pref,\r\n      genre: genre,\r\n      images: images,\r\n      menus: [],\r\n      updated_at: timestamp\r\n    }\r\n    \r\n    if (id === \"\") {\r\n      const ref = restaurantsRef.doc()\r\n      data.created_at = timestamp;\r\n      id = ref.id;\r\n      data.id = id;\r\n    }\r\n\r\n\r\n    return restaurantsRef.doc(id).set(data, {merge: true})\r\n      .then(() => {\r\n        dispatch(push('/'))\r\n      }).catch((error) => {\r\n        throw new Error(error)\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}