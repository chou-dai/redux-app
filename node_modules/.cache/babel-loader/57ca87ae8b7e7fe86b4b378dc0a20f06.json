{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\c.daiki\\\\Desktop\\\\react\\\\redux\\\\redux-app\\\\src\\\\components\\\\Menus\\\\ImageArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport { makeStyles } from '@material-ui/styles';\nimport { storage } from '../../firebase';\nimport ImagePreview from './ImagePreview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  icon: {\n    height: 48,\n    width: 48\n  }\n});\n\nconst ImageArea = props => {\n  _s();\n\n  const classes = useStyles();\n  const uploadImage = useCallback(event => {\n    const file = event.target.files;\n    let blob = new Blob(file, {\n      type: 'image/jpeg'\n    });\n    const S = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    const N = 16;\n    const fileName = Array.from(crypto.getRandomValues(new Uint32Array(N))).map(n => S[n % S.length]).join('');\n    const uploadRef = storage.ref('images').child(fileName);\n    const uploadTask = uploadRef.put(blob);\n    uploadTask.then(() => {\n      uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => {\n        const newImage = {\n          id: fileName,\n          path: downloadURL\n        };\n        props.setImages(prevState => [...prevState, newImage]);\n      });\n    });\n  }, [props.setImages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-grid__list-images\",\n      children: props.images.length > 0 && props.images.map(image => /*#__PURE__*/_jsxDEV(ImagePreview, {\n        id: image.id,\n        path: image.path\n      }, image.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 37\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"u-text-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u30E1\\u30CB\\u30E5\\u30FC\\u3092\\u767B\\u9332\\u3059\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        className: classes.icon,\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(AddPhotoAlternateIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"u-display-none\",\n            type: \"file\",\n            id: \"image\",\n            onChange: event => uploadImage(event)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImageArea, \"QH/5yff8H/sHeEbAGYofSyiNyYE=\", false, function () {\n  return [useStyles];\n});\n\n_c = ImageArea;\nexport default ImageArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageArea\");","map":{"version":3,"sources":["C:/Users/c.daiki/Desktop/react/redux/redux-app/src/components/Menus/ImageArea.js"],"names":["React","useCallback","IconButton","AddPhotoAlternateIcon","makeStyles","storage","ImagePreview","useStyles","icon","height","width","ImageArea","props","classes","uploadImage","event","file","target","files","blob","Blob","type","S","N","fileName","Array","from","crypto","getRandomValues","Uint32Array","map","n","length","join","uploadRef","ref","child","uploadTask","put","then","snapshot","getDownloadURL","downloadURL","newImage","id","path","setImages","prevState","images","image","key"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { storage } from '../../firebase';\r\nimport ImagePreview from './ImagePreview';\r\n\r\nconst useStyles = makeStyles({\r\n  icon: {\r\n    height: 48,\r\n    width: 48\r\n  }\r\n})\r\n\r\nconst ImageArea = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const uploadImage = useCallback((event) => {\r\n    const file = event.target.files;\r\n    let blob = new Blob(file, {type: 'image/jpeg'});\r\n\r\n    const S=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n    const N=16;\r\n    const fileName = Array.from(crypto.getRandomValues(new Uint32Array(N))).map((n)=>S[n%S.length]).join('')\r\n\r\n    const uploadRef = storage.ref('images').child(fileName);\r\n      const uploadTask = uploadRef.put(blob);\r\n\r\n      uploadTask.then(() => {\r\n          uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n              const newImage = {id: fileName, path: downloadURL};\r\n              props.setImages((prevState => [...prevState, newImage]))\r\n          });\r\n      })\r\n  }, [props.setImages])\r\n\r\n  return (\r\n    <div>\r\n      <div className='p-grid__list-images'>\r\n        {props.images.length > 0 && (\r\n          props.images.map(image => <ImagePreview id={image.id} path={image.path} key={image.key} />)\r\n        )}\r\n      </div>\r\n      <div className='u-text-right'>\r\n        <span>メニューを登録する</span>\r\n        <IconButton className={classes.icon}>\r\n          <label>\r\n            <AddPhotoAlternateIcon />\r\n            <input\r\n              className='u-display-none' type='file' id='image'\r\n              onChange={(event) => uploadImage(event)}\r\n            />\r\n          </label>\r\n        </IconButton>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageArea\r\n"]},"metadata":{},"sourceType":"module"}