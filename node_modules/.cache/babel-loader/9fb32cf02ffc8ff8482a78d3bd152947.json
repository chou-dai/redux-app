{"ast":null,"code":"import { push } from 'connected-react-router';\nimport { db, FirebaseTimestamp } from '../../firebase';\nimport { fetchMenusAction } from './actions';\nconst menusRef = db.collection('menus');\nexport const deleteMenu = id => {\n  return async dispatch => {\n    menusRef.doc(id).delete();\n  };\n};\nexport const fetchMenus = () => {\n  return async dispatch => {\n    menusRef.orderBy('updated_at', 'desc').get().then(snapshots => {\n      const menuList = [];\n      snapshots.forEach(snapshot => {\n        const menu = snapshot.data();\n        menuList.push(menu);\n      });\n      dispatch(fetchMenusAction(menuList));\n    });\n  };\n};\nexport const saveMenue = (id, menu, price, star, images) => {\n  return async dispatch => {\n    const timestamp = FirebaseTimestamp.now();\n    const data = {\n      menu: menu,\n      price: parseInt(price, 10),\n      star: star,\n      images: images,\n      updated_at: timestamp\n    };\n\n    if (id === \"\") {\n      const ref = menusRef.doc();\n      data.created_at = timestamp;\n      id = ref.id;\n      data.id = id;\n    }\n\n    return menusRef.doc(id).set(data, {\n      merge: true\n    }).then(() => {\n      dispatch(push('/'));\n    }).catch(error => {\n      throw new Error(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/c.daiki/Desktop/react/redux/redux-app/src/reducks/menus/operations.js"],"names":["push","db","FirebaseTimestamp","fetchMenusAction","menusRef","collection","deleteMenu","id","dispatch","doc","delete","fetchMenus","orderBy","get","then","snapshots","menuList","forEach","snapshot","menu","data","saveMenue","price","star","images","timestamp","now","parseInt","updated_at","ref","created_at","set","merge","catch","error","Error"],"mappings":"AAAA,SAASA,IAAT,QAAqB,wBAArB;AACA,SAASC,EAAT,EAAaC,iBAAb,QAAsC,gBAAtC;AACA,SAASC,gBAAT,QAAiC,WAAjC;AAEA,MAAMC,QAAQ,GAAGH,EAAE,CAACI,UAAH,CAAc,OAAd,CAAjB;AAEA,OAAO,MAAMC,UAAU,GAAIC,EAAD,IAAQ;AAChC,SAAO,MAAOC,QAAP,IAAoB;AACzBJ,IAAAA,QAAQ,CAACK,GAAT,CAAaF,EAAb,EAAiBG,MAAjB;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAO,MAAMH,QAAN,IAAmB;AACxBJ,IAAAA,QAAQ,CAACQ,OAAT,CAAiB,YAAjB,EAA+B,MAA/B,EAAuCC,GAAvC,GACGC,IADH,CACQC,SAAS,IAAI;AACjB,YAAMC,QAAQ,GAAG,EAAjB;AACAD,MAAAA,SAAS,CAACE,OAAV,CAAkBC,QAAQ,IAAI;AAC5B,cAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAT,EAAb;AACAJ,QAAAA,QAAQ,CAAChB,IAAT,CAAcmB,IAAd;AACD,OAHD;AAIAX,MAAAA,QAAQ,CAACL,gBAAgB,CAACa,QAAD,CAAjB,CAAR;AACD,KARH;AASD,GAVD;AAWD,CAZM;AAcP,OAAO,MAAMK,SAAS,GAAG,CAACd,EAAD,EAAKY,IAAL,EAAWG,KAAX,EAAkBC,IAAlB,EAAwBC,MAAxB,KAAmC;AAC1D,SAAO,MAAMhB,QAAN,IAAmB;AACxB,UAAMiB,SAAS,GAAGvB,iBAAiB,CAACwB,GAAlB,EAAlB;AAEA,UAAMN,IAAI,GAAG;AACXD,MAAAA,IAAI,EAAEA,IADK;AAEXG,MAAAA,KAAK,EAAEK,QAAQ,CAACL,KAAD,EAAQ,EAAR,CAFJ;AAGXC,MAAAA,IAAI,EAAEA,IAHK;AAIXC,MAAAA,MAAM,EAAEA,MAJG;AAKXI,MAAAA,UAAU,EAAEH;AALD,KAAb;;AAQA,QAAIlB,EAAE,KAAK,EAAX,EAAe;AACb,YAAMsB,GAAG,GAAGzB,QAAQ,CAACK,GAAT,EAAZ;AACAW,MAAAA,IAAI,CAACU,UAAL,GAAkBL,SAAlB;AACAlB,MAAAA,EAAE,GAAGsB,GAAG,CAACtB,EAAT;AACAa,MAAAA,IAAI,CAACb,EAAL,GAAUA,EAAV;AACD;;AAGD,WAAOH,QAAQ,CAACK,GAAT,CAAaF,EAAb,EAAiBwB,GAAjB,CAAqBX,IAArB,EAA2B;AAACY,MAAAA,KAAK,EAAE;AAAR,KAA3B,EACJlB,IADI,CACC,MAAM;AACVN,MAAAA,QAAQ,CAACR,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,KAHI,EAGFiC,KAHE,CAGKC,KAAD,IAAW;AAClB,YAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD,KALI,CAAP;AAMD,GAzBD;AA0BD,CA3BM","sourcesContent":["import { push } from 'connected-react-router';\r\nimport { db, FirebaseTimestamp } from '../../firebase';\r\nimport { fetchMenusAction } from './actions';\r\n\r\nconst menusRef = db.collection('menus');\r\n\r\nexport const deleteMenu = (id) => {\r\n  return async (dispatch) => {\r\n    menusRef.doc(id).delete()\r\n  }\r\n}\r\n\r\nexport const fetchMenus = () => {\r\n  return async(dispatch) => {\r\n    menusRef.orderBy('updated_at', 'desc').get()\r\n      .then(snapshots => {\r\n        const menuList = []\r\n        snapshots.forEach(snapshot => {\r\n          const menu = snapshot.data()\r\n          menuList.push(menu)\r\n        })\r\n        dispatch(fetchMenusAction(menuList))\r\n      })\r\n  }\r\n}\r\n\r\nexport const saveMenue = (id, menu, price, star, images) => {\r\n  return async(dispatch) => {\r\n    const timestamp = FirebaseTimestamp.now()\r\n\r\n    const data = {\r\n      menu: menu,\r\n      price: parseInt(price, 10),\r\n      star: star,\r\n      images: images,\r\n      updated_at: timestamp\r\n    }\r\n    \r\n    if (id === \"\") {\r\n      const ref = menusRef.doc()\r\n      data.created_at = timestamp;\r\n      id = ref.id;\r\n      data.id = id;\r\n    }\r\n\r\n\r\n    return menusRef.doc(id).set(data, {merge: true})\r\n      .then(() => {\r\n        dispatch(push('/'))\r\n      }).catch((error) => {\r\n        throw new Error(error)\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}