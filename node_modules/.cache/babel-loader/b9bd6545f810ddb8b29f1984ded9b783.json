{"ast":null,"code":"import { push } from 'connected-react-router';\nimport { db, FirebaseTimestamp } from '../../firebase';\nimport { deleteReviewAction, fetchReviewsAction } from './actions';\nconst reviewsRef = db.collection('restaurants');\nexport const deleteReview = (restId, id) => {\n  return async (dispatch, getState) => {\n    reviewsRef.doc(restId).collection('menus').doc(id).delete().then(() => {\n      const prevReviews = getState().reviews.list;\n      const nextReviews = prevReviews.filter(review => review.id !== id);\n      dispatch(deleteReviewAction(nextReviews));\n    });\n  };\n};\nexport const fetchReviews = restId => {\n  return async dispatch => {\n    reviewsRef.doc(restId).collection('menus').orderBy('star', 'desc').get().then(snapshots => {\n      const reviewList = [];\n      snapshots.forEach(snapshot => {\n        const review = snapshot.data();\n        reviewList.push(review);\n      });\n      dispatch(fetchReviewsAction(reviewList));\n    });\n  };\n};\nexport const saveReviews = (restId, menuId, id, star, images, text) => {\n  return async dispatch => {\n    const timestamp = FirebaseTimestamp.now();\n    const data = {\n      star: star,\n      images: images,\n      text: text,\n      updated_at: timestamp\n    };\n\n    if (id === \"\") {\n      const ref = reviewsRef.doc();\n      data.created_at = timestamp;\n      id = ref.id;\n      data.id = id;\n    }\n\n    db.collection('restaurants').doc(restId).collection('menus').doc(menuId).collection('reviews').doc(id).get().then(snapshot => {\n      const a = snapshot.data();\n      console.log(a);\n    });\n    return reviewsRef.doc(restId).collection('menus').doc(menuId).collection('reviews').doc(id).set(data, {\n      merge: true\n    }).then(() => {\n      dispatch(push('/restaurant/' + restId + '/menu/' + menuId));\n    }).catch(error => {\n      throw new Error(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/c.daiki/Desktop/react/redux/redux-app/src/reducks/reviews/operations.js"],"names":["push","db","FirebaseTimestamp","deleteReviewAction","fetchReviewsAction","reviewsRef","collection","deleteReview","restId","id","dispatch","getState","doc","delete","then","prevReviews","reviews","list","nextReviews","filter","review","fetchReviews","orderBy","get","snapshots","reviewList","forEach","snapshot","data","saveReviews","menuId","star","images","text","timestamp","now","updated_at","ref","created_at","a","console","log","set","merge","catch","error","Error"],"mappings":"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","sourcesContent":["import { push } from 'connected-react-router';\r\nimport { db, FirebaseTimestamp } from '../../firebase';\r\nimport { deleteReviewAction, fetchReviewsAction } from './actions';\r\n\r\n\r\nconst reviewsRef = db.collection('restaurants');\r\n\r\nexport const deleteReview = (restId, id) => {\r\n  return async(dispatch, getState) => {\r\n    reviewsRef.doc(restId).collection('menus').doc(id).delete()\r\n      .then(() => {\r\n        const prevReviews = getState().reviews.list\r\n        const nextReviews = prevReviews.filter(review => review.id !== id)\r\n        dispatch(deleteReviewAction(nextReviews))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchReviews = (restId) => {\r\n  return async(dispatch) => {\r\n    reviewsRef.doc(restId).collection('menus').orderBy('star', 'desc').get()\r\n      .then(snapshots => {\r\n        const reviewList = []\r\n        snapshots.forEach(snapshot => {\r\n          const review = snapshot.data()\r\n          reviewList.push(review)\r\n        })\r\n        dispatch(fetchReviewsAction(reviewList))\r\n      })\r\n  }\r\n}\r\n\r\nexport const saveReviews = (restId, menuId, id, star, images, text) => {\r\n  return async(dispatch) => {\r\n    const timestamp = FirebaseTimestamp.now()\r\n\r\n    const data = {\r\n      star: star,\r\n      images: images,\r\n      text: text,\r\n      updated_at: timestamp\r\n    }\r\n\r\n    if (id === \"\") {\r\n      const ref = reviewsRef.doc()\r\n      data.created_at = timestamp;\r\n      id = ref.id;\r\n      data.id = id;\r\n    }\r\n    db.collection('restaurants').doc(restId).collection('menus').doc(menuId).collection('reviews').doc(id).get()\r\n      .then(snapshot => {\r\n        const a = snapshot.data();\r\n        console.log(a);\r\n      })\r\n\r\n    return reviewsRef.doc(restId).collection('menus').doc(menuId).collection('reviews').doc(id).set(data, {merge: true})\r\n      .then(() => {\r\n        dispatch(push('/restaurant/'+ restId + '/menu/' + menuId))\r\n      }).catch((error) => {\r\n        throw new Error(error)\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}