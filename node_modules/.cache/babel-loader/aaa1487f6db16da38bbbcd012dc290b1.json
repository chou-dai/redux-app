{"ast":null,"code":"import { push } from 'connected-react-router';\nimport { db, FirebaseTimestamp } from '../../firebase';\nimport { deleteMenuAction, fetchMenusAction } from './actions';\nconst menusRef = db.collection('restaurants');\nexport const deleteMenu = (restId, id) => {\n  return async (dispatch, getState) => {\n    menusRef.doc(restId).collection('menus').doc(id).delete().then(() => {\n      const prevMenus = getState().menus.list;\n      const nextMenus = prevMenus.filter(menu => menu.id !== id);\n      dispatch(deleteMenuAction(nextMenus));\n    });\n  };\n};\nexport const fetchMenus = restId => {\n  return async dispatch => {\n    menusRef.doc(restId).collection('menus').orderBy('star', 'desc').get().then(snapshots => {\n      const menuList = [];\n      snapshots.forEach(snapshot => {\n        const menu = snapshot.data();\n        menuList.push(menu);\n      });\n      dispatch(fetchMenusAction(menuList));\n    });\n  };\n};\nexport const calcStar = (restId, id) => {\n  menusRef.doc(restId).collection('menus').doc(id).collection('reviews').get().then(snapshots => {\n    let star = 0;\n    let count = 0;\n    snapshots.forEach(snapshot => {\n      const data = snapshot.data().star;\n      star = star + parseInt(data);\n      count = count + 1;\n    });\n    const data = {\n      star: Math.round(star / count)\n    };\n    console.log(data);\n    menusRef.doc(restId).collection('menus').doc(id).set(data, {\n      merge: true\n    });\n  });\n};\nexport const saveMenu = (restId, id, name, price, images) => {\n  return async dispatch => {\n    const timestamp = FirebaseTimestamp.now();\n    const data = {\n      name: name,\n      price: parseInt(price, 10),\n      star: NaN,\n      images: images,\n      updated_at: timestamp\n    };\n\n    if (id === \"\") {\n      const ref = menusRef.doc();\n      data.created_at = timestamp;\n      id = ref.id;\n      data.id = id;\n    }\n\n    return menusRef.doc(restId).collection('menus').doc(id).set(data, {\n      merge: true\n    }).then(() => {\n      dispatch(push('/restaurant/' + restId + '/menu/'));\n    }).catch(error => {\n      throw new Error(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/c.daiki/Desktop/react/redux/redux-app/src/reducks/menus/operations.js"],"names":["push","db","FirebaseTimestamp","deleteMenuAction","fetchMenusAction","menusRef","collection","deleteMenu","restId","id","dispatch","getState","doc","delete","then","prevMenus","menus","list","nextMenus","filter","menu","fetchMenus","orderBy","get","snapshots","menuList","forEach","snapshot","data","calcStar","star","count","parseInt","Math","round","console","log","set","merge","saveMenu","name","price","images","timestamp","now","NaN","updated_at","ref","created_at","catch","error","Error"],"mappings":"AAAA,SAASA,IAAT,QAAqB,wBAArB;AACA,SAASC,EAAT,EAAaC,iBAAb,QAAsC,gBAAtC;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,WAAnD;AAGA,MAAMC,QAAQ,GAAGJ,EAAE,CAACK,UAAH,CAAc,aAAd,CAAjB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,EAAT,KAAgB;AACxC,SAAO,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AAClCN,IAAAA,QAAQ,CAACO,GAAT,CAAaJ,MAAb,EAAqBF,UAArB,CAAgC,OAAhC,EAAyCM,GAAzC,CAA6CH,EAA7C,EAAiDI,MAAjD,GACGC,IADH,CACQ,MAAM;AACV,YAAMC,SAAS,GAAGJ,QAAQ,GAAGK,KAAX,CAAiBC,IAAnC;AACA,YAAMC,SAAS,GAAGH,SAAS,CAACI,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYA,EAArC,CAAlB;AACAC,MAAAA,QAAQ,CAACP,gBAAgB,CAACe,SAAD,CAAjB,CAAR;AACD,KALH;AAMD,GAPD;AAQD,CATM;AAWP,OAAO,MAAMG,UAAU,GAAIb,MAAD,IAAY;AACpC,SAAO,MAAME,QAAN,IAAmB;AACxBL,IAAAA,QAAQ,CAACO,GAAT,CAAaJ,MAAb,EAAqBF,UAArB,CAAgC,OAAhC,EAAyCgB,OAAzC,CAAiD,MAAjD,EAAyD,MAAzD,EAAiEC,GAAjE,GACGT,IADH,CACQU,SAAS,IAAI;AACjB,YAAMC,QAAQ,GAAG,EAAjB;AACAD,MAAAA,SAAS,CAACE,OAAV,CAAkBC,QAAQ,IAAI;AAC5B,cAAMP,IAAI,GAAGO,QAAQ,CAACC,IAAT,EAAb;AACAH,QAAAA,QAAQ,CAACzB,IAAT,CAAcoB,IAAd;AACD,OAHD;AAIAV,MAAAA,QAAQ,CAACN,gBAAgB,CAACqB,QAAD,CAAjB,CAAR;AACD,KARH;AASD,GAVD;AAWD,CAZM;AAcP,OAAO,MAAMI,QAAQ,GAAG,CAACrB,MAAD,EAASC,EAAT,KAAgB;AACtCJ,EAAAA,QAAQ,CAACO,GAAT,CAAaJ,MAAb,EAAqBF,UAArB,CAAgC,OAAhC,EAAyCM,GAAzC,CAA6CH,EAA7C,EAAiDH,UAAjD,CAA4D,SAA5D,EAAuEiB,GAAvE,GACGT,IADH,CACQU,SAAS,IAAI;AACjB,QAAIM,IAAI,GAAG,CAAX;AACA,QAAIC,KAAK,GAAG,CAAZ;AACAP,IAAAA,SAAS,CAACE,OAAV,CAAkBC,QAAQ,IAAI;AAC5B,YAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,GAAgBE,IAA7B;AACAA,MAAAA,IAAI,GAAGA,IAAI,GAAGE,QAAQ,CAACJ,IAAD,CAAtB;AACAG,MAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACD,KAJD;AAKF,UAAMH,IAAI,GAAG;AAACE,MAAAA,IAAI,EAAEG,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAACC,KAAhB;AAAP,KAAb;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACAvB,IAAAA,QAAQ,CAACO,GAAT,CAAaJ,MAAb,EAAqBF,UAArB,CAAgC,OAAhC,EAAyCM,GAAzC,CAA6CH,EAA7C,EAAiD4B,GAAjD,CAAqDT,IAArD,EAA2D;AAACU,MAAAA,KAAK,EAAE;AAAR,KAA3D;AACD,GAZD;AAaD,CAdM;AAgBP,OAAO,MAAMC,QAAQ,GAAG,CAAC/B,MAAD,EAASC,EAAT,EAAa+B,IAAb,EAAmBC,KAAnB,EAA0BC,MAA1B,KAAqC;AAC3D,SAAO,MAAMhC,QAAN,IAAmB;AACxB,UAAMiC,SAAS,GAAGzC,iBAAiB,CAAC0C,GAAlB,EAAlB;AAEA,UAAMhB,IAAI,GAAG;AACXY,MAAAA,IAAI,EAAEA,IADK;AAEXC,MAAAA,KAAK,EAAET,QAAQ,CAACS,KAAD,EAAQ,EAAR,CAFJ;AAGXX,MAAAA,IAAI,EAAEe,GAHK;AAIXH,MAAAA,MAAM,EAAEA,MAJG;AAKXI,MAAAA,UAAU,EAAEH;AALD,KAAb;;AAQA,QAAIlC,EAAE,KAAK,EAAX,EAAe;AACb,YAAMsC,GAAG,GAAG1C,QAAQ,CAACO,GAAT,EAAZ;AACAgB,MAAAA,IAAI,CAACoB,UAAL,GAAkBL,SAAlB;AACAlC,MAAAA,EAAE,GAAGsC,GAAG,CAACtC,EAAT;AACAmB,MAAAA,IAAI,CAACnB,EAAL,GAAUA,EAAV;AACD;;AAED,WAAOJ,QAAQ,CAACO,GAAT,CAAaJ,MAAb,EAAqBF,UAArB,CAAgC,OAAhC,EAAyCM,GAAzC,CAA6CH,EAA7C,EAAiD4B,GAAjD,CAAqDT,IAArD,EAA2D;AAACU,MAAAA,KAAK,EAAE;AAAR,KAA3D,EACJxB,IADI,CACC,MAAM;AACVJ,MAAAA,QAAQ,CAACV,IAAI,CAAC,iBAAgBQ,MAAhB,GAAyB,QAA1B,CAAL,CAAR;AACD,KAHI,EAGFyC,KAHE,CAGKC,KAAD,IAAW;AAClB,YAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD,KALI,CAAP;AAMD,GAxBD;AAyBD,CA1BM","sourcesContent":["import { push } from 'connected-react-router';\r\nimport { db, FirebaseTimestamp } from '../../firebase';\r\nimport { deleteMenuAction, fetchMenusAction } from './actions';\r\n\r\n\r\nconst menusRef = db.collection('restaurants');\r\n\r\nexport const deleteMenu = (restId, id) => {\r\n  return async(dispatch, getState) => {\r\n    menusRef.doc(restId).collection('menus').doc(id).delete()\r\n      .then(() => {\r\n        const prevMenus = getState().menus.list\r\n        const nextMenus = prevMenus.filter(menu => menu.id !== id)\r\n        dispatch(deleteMenuAction(nextMenus))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchMenus = (restId) => {\r\n  return async(dispatch) => {\r\n    menusRef.doc(restId).collection('menus').orderBy('star', 'desc').get()\r\n      .then(snapshots => {\r\n        const menuList = []\r\n        snapshots.forEach(snapshot => {\r\n          const menu = snapshot.data()\r\n          menuList.push(menu)\r\n        })\r\n        dispatch(fetchMenusAction(menuList))\r\n      })\r\n  }\r\n}\r\n\r\nexport const calcStar = (restId, id) => {\r\n  menusRef.doc(restId).collection('menus').doc(id).collection('reviews').get()\r\n    .then(snapshots => {\r\n      let star = 0;\r\n      let count = 0;\r\n      snapshots.forEach(snapshot => {\r\n        const data = snapshot.data().star;\r\n        star = star + parseInt(data);\r\n        count = count + 1;\r\n      })\r\n    const data = {star: Math.round(star/count)}\r\n    console.log(data);\r\n    menusRef.doc(restId).collection('menus').doc(id).set(data, {merge: true})\r\n  })\r\n}\r\n\r\nexport const saveMenu = (restId, id, name, price, images) => {\r\n  return async(dispatch) => {\r\n    const timestamp = FirebaseTimestamp.now()\r\n\r\n    const data = {\r\n      name: name,\r\n      price: parseInt(price, 10),\r\n      star: NaN,\r\n      images: images,\r\n      updated_at: timestamp\r\n    }\r\n\r\n    if (id === \"\") {\r\n      const ref = menusRef.doc()\r\n      data.created_at = timestamp;\r\n      id = ref.id;\r\n      data.id = id;\r\n    }\r\n\r\n    return menusRef.doc(restId).collection('menus').doc(id).set(data, {merge: true})\r\n      .then(() => {\r\n        dispatch(push('/restaurant/'+ restId + '/menu/'))\r\n      }).catch((error) => {\r\n        throw new Error(error)\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}